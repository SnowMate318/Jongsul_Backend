# Generated by Django 5.0.6 on 2024-05-26 11:39

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(max_length=50, null=True, unique=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_name', models.CharField(blank=True, max_length=30)),
                ('profile', models.ImageField(blank=True, null=True, upload_to='%Y%m%d/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.ImageField(null=True, upload_to='images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('text', models.CharField(blank=True, max_length=8000)),
                ('type_data', models.CharField(max_length=10)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='image', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, null=True)),
                ('library_last_access', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'library',
            },
        ),
        migrations.CreateModel(
            name='Directory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_successed', models.IntegerField(null=True)),
                ('concept', models.CharField(max_length=2000, null=True)),
                ('title', models.CharField(max_length=30)),
                ('question_type', models.CharField(max_length=100, null=True)),
                ('directory_last_access', models.DateTimeField(auto_now=True)),
                ('is_scrap_directory', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='directory', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='directory', to='main.library')),
            ],
            options={
                'db_table': 'directory',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_num', models.IntegerField()),
                ('question_title', models.CharField(max_length=1000)),
                ('question_content', models.CharField(max_length=2000, null=True)),
                ('question_answer', models.CharField(max_length=100)),
                ('question_explanation', models.CharField(max_length=2000)),
                ('question_type', models.IntegerField()),
                ('last_solved', models.BooleanField(null=True)),
                ('is_scrapped', models.BooleanField(default=False)),
                ('directory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='main.directory')),
            ],
            options={
                'db_table': 'question',
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_num', models.IntegerField()),
                ('choice_content', models.CharField(max_length=500)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='main.question')),
            ],
            options={
                'db_table': 'choice',
            },
        ),
        migrations.CreateModel(
            name='Shared',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shared_title', models.CharField(max_length=30)),
                ('shared_content', models.CharField(max_length=500)),
                ('shared_upload_datetime', models.DateTimeField(auto_now_add=True)),
                ('is_activated', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('download_count', models.IntegerField(default=0)),
                ('directory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.directory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shareds', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'shared',
            },
        ),
        migrations.CreateModel(
            name='SharedTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('shared', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_tags', to='main.shared')),
            ],
            options={
                'db_table': 'shared_tag',
            },
        ),
        migrations.CreateModel(
            name='WebProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_type', models.CharField(max_length=10)),
                ('provider_id', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='web_provider', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'web_provider',
            },
        ),
        migrations.AddConstraint(
            model_name='library',
            constraint=models.UniqueConstraint(fields=('user', 'title'), name='unique library title'),
        ),
        migrations.AddConstraint(
            model_name='directory',
            constraint=models.UniqueConstraint(fields=('library', 'title'), name='unique directory title'),
        ),
        migrations.AddConstraint(
            model_name='sharedtag',
            constraint=models.UniqueConstraint(fields=('shared', 'name'), name='unique shared tag name'),
        ),
    ]
